// Updated Prisma Schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // Optional directUrl for Neon's connection pooling in production
  directUrl = env("DATABASE_DIRECT_URL")
  schemas   = ["auth", "public"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

enum UsersType {
  vendor
  client
  driver
  admin
  helpdesk
  super_admin

  @@schema("public")
}

enum UsersStatus {
  active
  pending
  deleted

  @@schema("public")
}

enum DriverStatus {
  arrived_at_vendor
  en_route_to_client
  arrived_to_client
  assigned
  completed

  @@schema("public")
}

enum CateringRequestsNeedHost {
  yes
  no

  @@schema("public")
}

enum CateringRequestsStatus {
  active
  assigned
  cancelled
  completed

  @@schema("public")
}

enum OnDemandStatus {
  active
  assigned
  cancelled
  completed

  @@schema("public")
}

enum OnDemandVehicleType {
  Car
  Van
  Truck

  @@schema("public")
}

enum ApplicationStatus {
  pending
  approved
  rejected
  interviewing

  @@schema("public")
}

enum FormSubmissionType {
  food
  flower
  bakery
  specialty

  @@schema("public")
}

model Profile {
  id                  String      @id @db.Uuid
  user_id             String      @unique @db.Uuid
  guid                String?
  name                String?
  email               String?     @unique
  image               String?
  type                UsersType   @default(vendor)
  company_name        String?     @db.VarChar(191)
  contact_name        String?     @db.VarChar(191)
  contact_number      String?     @db.VarChar(191)
  website             String?     @db.VarChar(191)
  street1             String?     @db.VarChar(191)
  street2             String?     @db.VarChar(191)
  city                String?     @db.VarChar(191)
  state               String?     @db.VarChar(191)
  zip                 String?     @db.VarChar(191)
  location_number     String?     @db.VarChar(191)
  parking_loading     String?     @db.VarChar(191)
  counties            String?
  time_needed         String?
  catering_brokerage  String?
  frequency           String?
  provide             String?
  head_count          String?     @db.VarChar(191)
  status              UsersStatus @default(pending)
  side_notes          String?
  confirmation_code   String?
  created_at          DateTime    @default(now()) @db.Timestamptz(6)
  updated_at          DateTime    @default(now()) @db.Timestamptz(6)
  isTemporaryPassword Boolean     @default(false)

  accounts          Account[]
  sessions          Session[]
  addresses         Address[]         @relation("AddressCreatedBy")
  catering_requests CateringRequest[]
  driver_dispatches Dispatch[]        @relation("DriverDispatch")
  user_dispatches   Dispatch[]        @relation("UserDispatch")
  file_uploads      FileUpload[]
  on_demands        OnDemand[]
  user_addresses    UserAddress[]
  job_applications  JobApplication[]

  @@map("profiles")
  @@schema("public")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
  @@schema("public")
}

model Address {
  id             String   @id @default(cuid())
  county         String?
  street1        String
  street2        String?
  city           String
  state          String
  zip            String
  createdAt      DateTime @default(now())
  createdBy      String?  @db.Uuid
  isRestaurant   Boolean  @default(false)
  isShared       Boolean  @default(false)
  locationNumber String?
  parkingLoading String?
  updatedAt      DateTime @updatedAt
  name           String?

  creator            Profile?          @relation("AddressCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  catering_pickup    CateringRequest[] @relation("CateringPickup")
  catering_delivery  CateringRequest[] @relation("CateringDelivery")
  on_demand_pickup   OnDemand[]        @relation("OnDemandPickup")
  on_demand_delivery OnDemand[]        @relation("OnDemandDelivery")
  user_addresses     UserAddress[]

  @@map("address")
  @@schema("public")
}

model CateringRequest {
  id                  BigInt                   @id @default(autoincrement())
  guid                String?
  user_id             String                   @db.Uuid
  address_id          String
  brokerage           String?                  @db.VarChar(191)
  order_number        String                   @unique
  date                DateTime?                @db.Date
  pickup_time         DateTime?                @db.Time(6)
  arrival_time        DateTime?                @db.Time(6)
  complete_time       DateTime?                @db.Time(6)
  headcount           String?                  @db.VarChar(191)
  need_host           CateringRequestsNeedHost @default(no)
  hours_needed        String?                  @db.VarChar(191)
  number_of_host      String?                  @db.VarChar(191)
  client_attention    String?
  pickup_notes        String?
  special_notes       String?
  image               String?
  status              CateringRequestsStatus?  @default(active)
  order_total         Decimal?                 @default(0.00) @db.Decimal(10, 2)
  tip                 Decimal?                 @default(0.00) @db.Decimal(10, 2)
  created_at          DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at          DateTime                 @default(now()) @db.Timestamptz(6)
  delivery_address_id String
  driver_status       DriverStatus?

  user             Profile      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  pickup_address   Address      @relation("CateringPickup", fields: [address_id], references: [id], onDelete: Restrict)
  delivery_address Address      @relation("CateringDelivery", fields: [delivery_address_id], references: [id], onDelete: Restrict)
  dispatches       Dispatch[]
  file_uploads     FileUpload[]

  @@map("catering_request")
  @@schema("public")
}

model Dispatch {
  id                String   @id @default(cuid())
  cateringRequestId BigInt?
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  driverId          String?  @db.Uuid
  on_demandId       BigInt?
  updatedAt         DateTime @default(now()) @db.Timestamptz(6)
  userId            String?  @db.Uuid

  catering_request CateringRequest? @relation(fields: [cateringRequestId], references: [id], onDelete: SetNull)
  driver           Profile?         @relation("DriverDispatch", fields: [driverId], references: [id], onDelete: SetNull)
  on_demand        OnDemand?        @relation(fields: [on_demandId], references: [id], onDelete: SetNull)
  user             Profile?         @relation("UserDispatch", fields: [userId], references: [id], onDelete: SetNull)

  @@map("dispatch")
  @@schema("public")
}

model FileUpload {
  id                String   @id @default(cuid())
  userId            String?  @db.Uuid
  fileName          String
  fileType          String
  fileSize          Int
  fileUrl           String
  uploadedAt        DateTime @default(now())
  updatedAt         DateTime @updatedAt
  cateringRequestId BigInt?
  onDemandId        BigInt?
  jobApplicationId  String?
  entityType        String
  entityId          String
  category          String?
  isTemporary       Boolean  @default(false)

  user             Profile?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  catering_request CateringRequest? @relation(fields: [cateringRequestId], references: [id], onDelete: Cascade)
  on_demand        OnDemand?        @relation(fields: [onDemandId], references: [id], onDelete: Cascade)
  job_application  JobApplication?  @relation(fields: [jobApplicationId], references: [id])

  @@index([entityType, entityId])
  @@map("file_upload")
  @@schema("public")
}

model OnDemand {
  id                  BigInt              @id @default(autoincrement())
  guid                String?
  user_id             String              @db.Uuid
  address_id          String
  order_number        String              @unique @db.VarChar(191)
  date                DateTime            @db.Date
  pickup_time         DateTime            @db.Time(6)
  arrival_time        DateTime            @db.Time(6)
  complete_time       DateTime?           @db.Time(6)
  hours_needed        String?             @db.VarChar(191)
  item_delivered      String?             @db.VarChar(191)
  vehicle_type        OnDemandVehicleType @default(Car)
  client_attention    String
  pickup_notes        String?
  special_notes       String?
  image               String?
  status              OnDemandStatus      @default(active)
  order_total         Decimal?            @default(0.00) @db.Decimal(10, 2)
  tip                 Decimal?            @default(0.00) @db.Decimal(10, 2)
  length              String?             @db.VarChar(191)
  width               String?             @db.VarChar(191)
  height              String?             @db.VarChar(191)
  weight              String?             @db.VarChar(191)
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  updated_at          DateTime            @default(now()) @db.Timestamptz(6)
  delivery_address_id String
  driver_status       DriverStatus?

  user             Profile      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  pickup_address   Address      @relation("OnDemandPickup", fields: [address_id], references: [id], onDelete: Restrict)
  delivery_address Address      @relation("OnDemandDelivery", fields: [delivery_address_id], references: [id], onDelete: Restrict)
  dispatches       Dispatch[]
  file_uploads     FileUpload[]

  @@map("on_demand")
  @@schema("public")
}

model UserAddress {
  id        String   @id @default(cuid())
  userId    String   @db.Uuid
  addressId String
  alias     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@unique([userId, addressId])
  @@map("userAddress")
  @@schema("public")
}

// Added the missing models from paste-2.txt and paste-3.txt

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
  @@schema("public")
}

model FormSubmission {
  id                  String             @id @default(uuid())
  updated_at          DateTime           @updatedAt @map("updatedAt")
  form_type           FormSubmissionType @map("formType")
  company_name        String             @map("companyName")
  contact_name        String             @map("contactName")
  email               String
  phone               String
  website             String
  counties            Json
  frequency           String
  pickup_address      Json               @map("pickupAddress")
  additional_comments String             @map("additionalComments")
  specifications      String

  @@map("form_submissions")
  @@schema("public")
}

model LeadCapture {
  id                 Int      @id @default(autoincrement())
  first_name         String
  last_name          String
  email              String   @unique
  industry           String
  newsletter_consent Boolean  @default(false)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  @@map("lead_capture")
  @@schema("public")
}

model JobApplication {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  position  String

  // Address fields
  addressStreet String
  addressCity   String
  addressState  String
  addressZip    String

  // Professional Information
  education      String
  workExperience String
  skills         String[]
  coverLetter    String?

  // Document URLs
  resumeUrl         String
  driversLicenseUrl String?
  insuranceUrl      String?
  vehicleRegUrl     String?

  // Status and timestamps
  status    ApplicationStatus @default(pending)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  fileUploads FileUpload[]
  userId      String?      @db.Uuid
  user        Profile?     @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([position])
  @@map("job_application")
  @@schema("public")
}
